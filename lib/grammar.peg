{
	function mk(type, obj) {
		obj.type = type;
		return obj;
	}
}

Program
	= __ stmts:Statement* {
		return stmts;
	}

Statement
	= stmt:Assignment TERM __ { return stmt; }
	/ stmt:MessageSend TERM __ { return stmt; }

Assignment
	= target:Ident _ ':=' _ val:RVal {
		return mk('assign', {
			target 	: target.name,
			value 	: val
		});
	}

RVal
	= MessageSend
	/ Expression

MessageSend
	= receiver:Expression _ message:Message {
		return mk('send', {
			receiver	: receiver,
			selector	: message.selector,
			args 		: message.args
		});
	}

Expression
	= v:Boolean _ 			{ return v; }
	/ v:Integer _ 			{ return v; }
	/ v:String _ 			{ return v; }
	/ v:Ident _ 			{ return v; }
	/ v:Ivar _ 				{ return v; }
	
Boolean
	= 'true' { return true; }
	/ 'false' { return false; }

Integer
	= val:$([0-9]+) {
		return parseInt(val, 10);
	}

String
	= '"' chars:$( [^"]* ) '"' {
		return chars;
	}

Ident
	= name:$( [A-Za-z_] [A-Za-z0-9_]* ) {
		return mk('ident', {name: name});
	}

Ivar
	= '@' name:$( [A-Za-z_] [A-Za-z0-9_]* ) {
		return mk('ivar', {name: name});	
	}

//
// Helpers

TERM
	= _ NL

NL
	= '\n'
	/ '\r' '\n'?

_
	= [ \t]*

__
	= [ \r\n\t]*